
https://github.com/PacktPublishing/Full-Stack-React-Projects


Currently, when the React Router routes or pathnames are directly entered in the browser address bar or when a view that is not at the root path is refreshed, the URL does not work. This happens because the server does not recognize the React Router routes. We have to implement basic server-side rendering on the backend, so the server is able to respond when it receives a request to a frontend route.

To render relevant React components properly when the server receives requests to the frontend routes, we need to render the React components server side with regard to the React Router and Material-UI components.

The basic idea behind server-side rendering of React apps is to use the renderToString method from react-dom to convert the root React component to markup string, and attach it to the template that the server renders when it receives a request.

In server.js, we will replace the code that returns template.js in response to the GET request for '/', with code, which on receiving any incoming GET request, generates server-side rendered markup of the relevant React components, and adds this markup to the template. This code will have the following structure

app.get('*', (req, res) => {
   const sheetsRegistry = new SheetsRegistry()
   const theme = createMuiTheme({
     palette: {
       primary: {
       light: '#757de8',
       main: '#3f51b5',
       dark: '#002984',
       contrastText: '#fff',
     },
     secondary: {
       light: '#ff79b0',
       main: '#ff4081',
       dark: '#c60055',
       contrastText: '#000',
     },
       openTitle: indigo['400'],
       protectedTitle: pink['400'],
       type: 'light'
     },
   })
   const generateClassName = createGenerateClassName()
   const context = {}
   const markup = ReactDOMServer.renderToString(
      <StaticRouter location={req.url} context={context}>
         <JssProvider registry={sheetsRegistry} generateClassName={generateClassName}>
            <MuiThemeProvider theme={theme} sheetsManager={new Map()}>
              <MainRouter/>
            </MuiThemeProvider>
         </JssProvider>
      </StaticRouter>
     )
    if (context.url) {
      return res.redirect(303, context.url)
    }
    const css = sheetsRegistry.toString()
    res.status(200).send(Template({
      markup: markup,
      css: css
    }))
})


To implement basic server-side rendering, we will need to import the following React, React Router, and Material-UI-specific modules into the server code. In our code structure, these modules will be imported into server/express.js:

React modules: Required to render the React components and use renderToString:
import React from 'react'
import ReactDOMServer from 'react-dom/server'

Router modules: The StaticRouter is a stateless router that takes the requested URL to match the frontend route and the MainRouter component, which is the root component in our frontend:

import StaticRouter from 'react-router-dom/StaticRouter'
import MainRouter from './../client/MainRouter'

Material-UI modules: The following modules will help generate the CSS styles for the frontend components based on the Material-UI theme used on the frontend:

import { SheetsRegistry } from 'react-jss/lib/jss'
import JssProvider from 'react-jss/lib/JssProvider'
import { MuiThemeProvider, createMuiTheme, createGenerateClassName } from 'material-ui/styles'
import { indigo, pink } from 'material-ui/colors”

With these modules, we can prepare, generate, and return server-side rendered frontend code.


When the server receives any request, prior to responding with the generated markup containing the React view, we need to prepare the CSS styles that should also be added to the markup, so the UI does not break on initial render.

const sheetsRegistry = new SheetsRegistry()
   const theme = createMuiTheme({
     palette: {
       primary: {
       light: '#757de8',
       main: '#3f51b5',
       dark: '#002984',
       contrastText: '#fff',
     },
     secondary: {
       light: '#ff79b0',
       main: '#ff4081',
       dark: '#c60055',
       contrastText: '#000',
     },
       openTitle: indigo['400'],
       protectedTitle: pink['400'],
       type: 'light'
     },
   })
   const generateClassName = createGenerateClassName()

 In order to inject the Material-UI styles, on every request we first generate a new SheetsRegistry and MUI theme instance, matching what is used in the frontend code.




 The purpose of using renderToString is to generate an HTML string version of the React component that is to be shown to the user in response to the requested URL: 

const markup = ReactDOMServer.renderToString(
      <StaticRouter location={req.url} context={context}>
         <JssProvider registry={sheetsRegistry} generateClassName={generateClassName}>
            <MuiThemeProvider theme={theme} sheetsManager={new Map()}>
              <MainRouter/>
            </MuiThemeProvider>
         </JssProvider>
      </StaticRouter>
     )

 The client app's root component, MainRouter, is wrapped with the Material-UI theme and JSS to provide the styling props needed by the MainRouter child components. The stateless StaticRouter is used here instead of the BrowserRouter used on the client side, to wrap MainRouter and provide the routing props used in implementing the client-side components. Based on these values, such as the requested location route and theme passed in as props to the wrapping components, the renderToString will return markup containing the relevant view.



Once the markup is generated, we first check if there was a redirect rendered in the component to be sent in the markup. If there was no redirect, then we generate the CSS string from the sheetsRegistry, and in the response send the template back with the markup and CSS injected. 

if (context.url) {
      return res.redirect(303, context.url)
    }
    const css = sheetsRegistry.toString()
    res.status(200).send(Template({
      markup: markup,
      css: css
    }))

An example of a case where redirect is rendered in the component is when trying to access a PrivateRoute via server-side render. As the server side cannot access the auth token from client-side sessionStorage, the redirect in the PrivateRoute will render. The context.url, in this case, will have the '/signin' route, and hence instead of trying to render the PrivateRoute component, it will redirect to the '/signin' route.



The markup and CSS generated on the server must be added to the template.js  HTML code as follows for it to be loaded when the server renders the template. 

template.js:

export default ({markup, css}) => {
    return `<!doctype html>
      <html lang="en">
        <head>
          <meta charset="utf-8">
          <title>MERN Skeleton</title>
          <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:100,300,400">
          <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
          <style>
              a{
                text-decoration: none
              }
          </style>
        </head>
        <body style="margin:0">
          <div id="root">${markup}</div>
          <style id="jss-server-side">${css}</style>
          <script type="text/javascript" src="/dist/bundle.js"></script>
        </body>
      </html>`


 Once the code rendered on the server side reaches the browser, and the frontend script takes over, we need to remove the server-side injected CSS when the main component mounts. This will give back full control over rendering the React app to the client side:

 client/MainRouter.js:

 import React, {Component} from 'react'
 import {Route, Switch} from 'react-router-dom'
 import Home from './core/Home'
 import Users from './user/Users'
 import Signup from './user/Signup'
 import Signin from './auth/Signin'
 import EditProfile from './user/EditProfile'
 import Profile from './user/Profile'
 import PrivateRoute from './auth/PrivateRoute'
 import Menu from './core/Menu'

 class MainRouter extends Component {
   // Removes the server-side injected CSS when React component mounts
   componentDidMount() {
     const jssStyles = document.getElementById('jss-server-side')
     if (jssStyles && jssStyles.parentNode) {
       jssStyles.parentNode.removeChild(jssStyles)
     }
   }

   render() {
     return (<div>
       <Menu/>
       <Switch>
         <Route exact path="/" component={Home}/>
         <Route path="/users" component={Users}/>
         <Route path="/signup" component={Signup}/>
         <Route path="/signin" component={Signin}/>
         <PrivateRoute path="/user/edit/:userId" component={EditProfile}/>
         <Route path="/user/:userId" component={Profile}/>
       </Switch>
     </div>)
   }
 }

 export default MainRouter



 Now that the React components will be rendered on the server side, we can update the main.js code to use ReactDOM.hydrate() instead of ReactDOM.render():

import React from 'react'
import { hydrate } from 'react-dom'
import App from './App'

hydrate(<App/>, document.getElementById('root'))


















